---
import { Icon } from 'astro-icon/components';

export interface Props {
  email: string;
  ariaLabel: string; // Crítico para la accesibilidad, especialmente en modo icono
  label?: string; // El texto a mostrar. Si se omite, se crea un botón de solo icono.
  successLabel?: string;
  iconName?: string;
  successIconName?: string;
  class?: string; // Permite pasar clases personalizadas para estilizar el botón
  iconSizeClass?: string; // Controla el tamaño del icono (ej. "size-4", "size-16")
  layout?: 'vertical' | 'horizontal'; // Define la disposición
  title?: string;
}

const {
  email,
  ariaLabel,
  label,
  successLabel = 'Copiado!',
  iconName = 'mdi:email',
  successIconName = 'mdi:check',
  class: className,
  iconSizeClass = 'size-16', // Por defecto, mantiene el tamaño grande para la sección de contacto
  layout = 'vertical', // Por defecto, mantiene la disposición vertical
  title,
} = Astro.props;

// Clases base para el botón
const baseClasses = 'group flex transition-colors duration-300 focus-visible:outline-none';

// Clases dinámicas según el layout
const layoutClasses = {
  vertical: 'flex-col items-center gap-2 text-muted-foreground hover:text-primary focus-visible:text-primary',
  horizontal: 'flex-row items-center gap-2', // Clases para un botón horizontal
};
---

<button
  class:list={[baseClasses, layoutClasses[layout], className]}
  aria-label={ariaLabel}
  data-email={email}
  data-label={label ?? ''}
  data-success-label={successLabel}
  title={title}
>
  <span class="icon-wrapper">
    <span class="email-icon">
      <Icon
        name={iconName}
        class:list={[iconSizeClass, "transition-transform duration-300 group-hover:scale-110"]}
      />
    </span>
    <span class="success-icon hidden">
      <Icon
        name={successIconName}
        class:list={[iconSizeClass, "text-green-500"]}
      />
    </span>
  </span>
  
  {label && <span class="email-label text-sm font-medium">{label}</span>}
</button>

<script>
  function setupEmailCopyButtons() {
    const emailButtons = document.querySelectorAll('button[data-email]');

    emailButtons.forEach((button) => {
      if (button.dataset.listenerAdded === 'true') {
        return;
      }
      button.dataset.listenerAdded = 'true';

      button.addEventListener('click', (event) => {
        const currentButton = event.currentTarget;
        const email = currentButton.dataset.email;

        if (!email) return;

        navigator.clipboard.writeText(email).then(() => {
          const initialIcon = currentButton.querySelector('.email-icon');
          const successIcon = currentButton.querySelector('.success-icon');
          const labelElement = currentButton.querySelector('.email-label');
          
          const originalLabelText = currentButton.dataset.label;
          const successLabelText = currentButton.dataset.successLabel;

          if (!initialIcon || !successIcon) return;

          initialIcon.classList.add('hidden');
          successIcon.classList.remove('hidden');

          // Solo actualiza el texto si el label existe
          if (labelElement && originalLabelText) {
            labelElement.textContent = successLabelText;
          }

          setTimeout(() => {
            initialIcon.classList.remove('hidden');
            successIcon.classList.add('hidden');
            if (labelElement && originalLabelText) {
              labelElement.textContent = originalLabelText;
            }
          }, 2000);

        }).catch(err => {
          console.error('Error al copiar el email:', err);
        });
      });
    });
  }

  document.addEventListener('DOMContentLoaded', setupEmailCopyButtons);
  document.addEventListener('astro:after-swap', setupEmailCopyButtons);
</script>