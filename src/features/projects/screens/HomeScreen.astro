---
import Heading from '@/components/Heading.astro';
import { buttonVariants } from '@/components/ui/button';
import type { LanguageCode } from '@/i18n/ui';
import { getRelativeLocaleUrl } from 'astro:i18n';
import { Calendar, Dumbbell } from 'lucide-react';

import heroImage from '@/assets/user-hero.webp';
import { Image } from 'astro:assets';
import FeaturedProjectPreview from '../components/FeaturedProjectPreview.astro';
import type { TranslatedProject, TranslatedSkill } from '../type';


import SkillsSection from '../components/SkillsSection.astro';
import SocialLinks from '../components/SocialLinks.astro';
import UselessButton from '@/components/UselessButton.astro';

export type Props = {
  lang: LanguageCode;
  projects: Array<TranslatedProject>;
  heroGreeting: string;
  heroSubtitlePart: string;
  heroIntroduction: string;
  heroViewWorkButton: string;
  heroContactButton: string;
  imageNotAvailable: string;
  featuredProjectsTitle: string;
  projectPreviewCtaText: string; // Added for specific project CTA
  contactTitle: string;
};

const {
  lang,
  projects,
  heroGreeting,
  heroSubtitlePart,
  heroIntroduction,
  heroViewWorkButton,
  heroContactButton,
  imageNotAvailable,
  featuredProjectsTitle,
  projectPreviewCtaText,
  contactTitle,
} = Astro.props;
---

<section class="py-12 md:py-16">
  <div class="grid md:grid-cols-2 gap-12 items-center justify-between">
    {/* Hero Text Column */}
    <div class="text-center md:text-left">
      <h1
        class="text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight mb-4"
      >
        {heroGreeting}
      </h1>
      <p class="text-2xl md:text-3xl font-medium text-muted-foreground mb-2">
        <span>{heroSubtitlePart}</span>
      </p>
      <p class="text-lg text-muted-foreground mb-8">
        {heroIntroduction}
      </p>
    </div>

    {/* Hero Image (Placeholder for now) */}
    <div class="md:text-center">
      <!-- 1. El activador: un div alrededor de la imagen -->
      <div 
        id="hero-image-trigger" 
        class="md:w-[460px] w-full h-92 bg-muted rounded-lg shadow-xl overflow-hidden md:mx-auto cursor-pointer group"
        title="Haz clic aquí... quizás pase algo."
      >
        <Image
          src={heroImage}
          alt={'User profile image'}
          width={460}
          height={368}
          densities={[1, 1.5, 2]}
          quality="high"
          class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-101"
          style="object-position: center 28%;"
        />
      </div>
    </div>
  </div>
</section>

{/* Skills Section */}
<SkillsSection />

{/* Featured Projects Section */}
<section id="projects" class="py-12 md:py-16 bg-muted/20 dark:bg-muted/10">
  <Heading
    title={featuredProjectsTitle}
    className="flex flex-col items-center"
  />

  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    {
      projects.slice(0, 3).map((project: TranslatedProject) => {
        return (
          <FeaturedProjectPreview
            lang={lang}
            slug={project.slug}
            title={project.title}
            imageUrl={project.imageUrl}
            imageAltText={project.imageAltText}
            ctaText={projectPreviewCtaText}
          />
        );
      })
    }
  </div>
</section>

<section id="contact" class="py-16 sm:py-20 text-center">
  <Heading
    title={contactTitle}
    className="max-w-2xl mx-auto"
  />
  <div class="mt-8 flex flex-col items-center gap-8">
    <SocialLinks />
    <UselessButton />
  </div>
</section>

<script>
  const trigger = document.getElementById('hero-image-trigger');
  const uselessButtonWrapper = document.getElementById('useless-button-wrapper');

  if (trigger && uselessButtonWrapper) {
    const clicksToReveal = 7; // ¿Cuántos clics en la foto para que aparezca el botón?
    let clickCount = 0;
    let timeoutId = null;

    trigger.addEventListener('click', () => {
      clickCount++;

      // Feedback visual: la imagen "pulsa"
      trigger.style.transition = 'transform 0.15s ease-in-out';
      trigger.style.transform = 'scale(0.995)';
      setTimeout(() => {trigger.style.transform = 'scale(1)';}, 150);

      // Reiniciar si el usuario tarda mucho
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {clickCount = 0;}, 2000); // 2 segundos de inactividad

      if (clickCount >= clicksToReveal) {
        // ¡Revelar el botón!
        uselessButtonWrapper.classList.remove('hidden');

        // Opcional: Desplazar la vista suavemente hacia el botón
        uselessButtonWrapper.scrollIntoView({ behavior: 'smooth', block: 'center' });

        // Desactivar el activador para no poder revelarlo de nuevo
        trigger.style.pointerEvents = 'none';
        trigger.style.cursor = 'default';
        trigger.title = '¡Lo encontraste!';
      }
    });
  }
</script>